# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
# REQUIRES: has_cuda_device
# RUN: %mojo %s | FileCheck %s

from sys._assembly import inlined_assembly

from gpu import ThreadIdx
from gpu.host import DeviceContext
from gpu.host._compile import _compile_code


fn kernel(x: Int) -> Int:
    return ThreadIdx.x()


fn parametric[f: fn (Int) -> Int]() -> Int:
    return f(42)


# CHECK-LABEL: test_compile_code
def test_compile_code():
    print("== test_compile_code")

    # CHECK: Generated by LLVM NVPTX Back-End
    # CHECK: .visible .entry  test_compile_nvptx_kernel_
    print(_compile_code[kernel]().asm)
    # CHECK: Generated by LLVM NVPTX Back-End
    # CHECK: .visible .entry test_compile_nvptx_parametric_
    print(_compile_code[parametric[kernel]]().asm)
    # CHECK: ; ModuleID =
    # CHECK: lvm.nvvm.read.ptx.sreg.tid.x()
    print(_compile_code[parametric[kernel], emission_kind="llvm"]().asm)


# CHECK-LABEL: test_compile_function
def test_compile_function():
    print("== test_compile_function")

    fn kernel(x: UnsafePointer[Int]):
        x[0] = ThreadIdx.x()

    # CHECK: tid.x

    with DeviceContext() as ctx:
        _ = ctx.compile_function[kernel, dump_ptx=True]()


# CHECK-LABEL: test_compile_function_with_assembly
def test_compile_function_with_assembly():
    print("== test_compile_function_with_assembly")

    fn kernel_inlined_assembly():
        inlined_assembly["nanosleep.u32 $0;", NoneType, constraints="r"](
            UInt32(100)
        )

    # CHECK: nanosleep
    # CHECK-NOT: begin assembly

    with DeviceContext() as ctx:
        _ = ctx.compile_function[kernel_inlined_assembly, dump_ptx=True]()


def main():
    test_compile_code()
    test_compile_function()
    test_compile_function_with_assembly()
