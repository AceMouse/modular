# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
# REQUIRES: NVIDIA-GPU
# RUN: %mojo-no-debug-no-assert %s | FileCheck %s

from pathlib import Path
from sys._assembly import inlined_assembly

from gpu import ThreadIdx, barrier
from gpu.host import DeviceContext
from gpu.host._compile import _compile_code_asm
from gpu.memory import AddressSpace
from memory import UnsafePointer, stack_allocation


fn kernel(x: Int) -> Int:
    return ThreadIdx.x


fn parametric[f: fn (Int) -> Int]() -> Int:
    return f(42)


# CHECK-LABEL: test_compile_code
def test_compile_code():
    print("== test_compile_code")

    # CHECK: Generated by LLVM NVPTX Back-End
    # CHECK: .visible .entry  test_compile_nvptx_kernel_
    print(_compile_code_asm[kernel]())
    # CHECK: Generated by LLVM NVPTX Back-End
    # CHECK: .visible .entry test_compile_nvptx_parametric_
    print(_compile_code_asm[parametric[kernel]]())
    # CHECK: ; ModuleID =
    # CHECK: lvm.nvvm.read.ptx.sreg.tid.x()
    print(_compile_code_asm[parametric[kernel], emission_kind="llvm"]())


# CHECK-LABEL: test_compile_function
def test_compile_function():
    print("== test_compile_function")

    fn kernel(x: UnsafePointer[Int]):
        x[0] = ThreadIdx.x

    # CHECK: tid.x

    with DeviceContext() as ctx:
        _ = ctx.compile_function[kernel, dump_asm=True]()


fn kernel_inlined_assembly():
    inlined_assembly["nanosleep.u32 $0;", NoneType, constraints="r"](
        UInt32(100)
    )


# CHECK-LABEL: test_compile_function_with_assembly
def test_compile_function_with_assembly():
    print("== test_compile_function_with_assembly")

    # CHECK: nanosleep
    # CHECK-NOT: begin assembly

    with DeviceContext() as ctx:
        _ = ctx.compile_function[kernel_inlined_assembly, dump_asm=True]()


# CHECK-LABEL: test_compile_function_with_path
def test_compile_function_with_path():
    print("== test_compile_function_with_path")

    # CHECK: nanosleep
    # CHECK-NOT: begin assembly

    with DeviceContext() as ctx:
        alias out_file = Path("/tmp/my_file.ptx")
        _ = ctx.compile_function[kernel_inlined_assembly, dump_asm=out_file]()
        print(out_file.read_text())


# CHECK-LABEL: test_compile_function_with_path_func
def test_compile_function_with_path_func():
    print("== test_compile_function_with_path_func")

    # CHECK: nanosleep
    # CHECK-NOT: begin assembly

    with DeviceContext() as ctx:
        var out_file_name = "my_file_2.ptx"
        alias out_dir = Path("/tmp")

        @parameter
        fn dummy_fn() capturing -> Path:
            return out_dir / out_file_name

        _ = ctx.compile_function[kernel_inlined_assembly, dump_asm=dummy_fn]()

        var out_file = out_dir / out_file_name
        print(out_file.read_text())


# CHECK-LABEL: test_short_nvptx_ptr
def test_short_nvptx_ptr():
    print("== test_short_nvptx_ptr")

    fn do_some_shared_mem_op(src: UnsafePointer[Int32]):
        var a = stack_allocation[
            20, Int32, address_space = AddressSpace.SHARED
        ]()
        a[ThreadIdx.x] = src[0]
        barrier()

    # CHECK: // demoted variable
    # CHECK-NOT: mov.u64
    # CHECK: mov.u32
    # CHECK-NEXT: shl.b32
    # CHECK-NEXT: mov.u32
    # CHECK-NEXT: add.s32
    # CHECK-NEXT: ld.global.u32
    # CHECK-NEXT: st.shared.u32
    with DeviceContext() as ctx:
        _ = ctx.compile_function[do_some_shared_mem_op, dump_asm=True]()


def main():
    test_compile_code()
    test_compile_function()
    test_compile_function_with_assembly()
    test_compile_function_with_path()
    test_compile_function_with_path_func()
    test_short_nvptx_ptr()
