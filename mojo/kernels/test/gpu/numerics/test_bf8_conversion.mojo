# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
# REQUIRES: H100-GPU
# RUN: %mojo-no-debug-no-assert %s | FileCheck %s

from gpu.host import DeviceContext
from gpu.host._compile import _get_gpu_target
from memory import bitcast


# CHECK-LABEL: test_scaler_e4m3_to_f32
# CHECK: 1.25
# CHECK: -1.25
# CHECK: 256.0
# CHECK: 256.0
# CHECK: -256.0
# CHECK: -256.0
# CHECK: nan
# CHECK: 0.013671875
# CHECK: -0.013671875
# CHECK: 0.0
# CHECK: -0.0
fn test_scaler_e4m3_to_f32():
    print("== test_scaler_e4m3_to_f32")

    # normal
    var e4m3_0 = Scalar[DType.float8e4m3](1.25)
    print(e4m3_0.cast[DType.float32]())
    var e4m3_1 = Scalar[DType.float8e4m3](-1.25)
    print(e4m3_1.cast[DType.float32]())
    var e4m3_7 = Scalar[DType.float8e4m3](256.0)
    print(e4m3_7.cast[DType.float32]())
    var e4m3_8 = Scalar[DType.float8e4m3](256.1)
    print(e4m3_8.cast[DType.float32]())
    var e4m3_9 = Scalar[DType.float8e4m3](-256.0)
    print(e4m3_9.cast[DType.float32]())
    var e4m3_10 = Scalar[DType.float8e4m3](-256.3)
    print(e4m3_10.cast[DType.float32]())

    # nan
    var e4m3_2 = bitcast[DType.float8e4m3](Scalar[DType.uint8](127))
    print(e4m3_2.cast[DType.float32]())

    # exponent = 0 and mantissa subnormal
    var e4m3_3 = bitcast[DType.float8e4m3](Scalar[DType.uint8](7))
    print(e4m3_3.cast[DType.float32]())
    var e4m3_4 = bitcast[DType.float8e4m3](Scalar[DType.uint8](135))
    print(e4m3_4.cast[DType.float32]())

    # sign-preserving zero
    var e4m3_5 = bitcast[DType.float8e4m3](Scalar[DType.uint8](0))
    print(e4m3_5.cast[DType.float32]())
    var e4m3_6 = bitcast[DType.float8e4m3](Scalar[DType.uint8](128))
    print(e4m3_6.cast[DType.float32]())


# CHECK-LABEL: test_scaler_e5m2_to_f32
# CHECK: 1.25
# CHECK: -1.25
# CHECK: 256.0
# CHECK: 256.0
# CHECK: -512.0
# CHECK: -512.0
# CHECK: 4.5776367e-05
# CHECK: -4.5776367e-05
# CHECK: 0.0
# CHECK: -0.0
# CHECK: inf
# CHECK: -inf
# CHECK: nan
# CHECK: nan
fn test_scaler_e5m2_to_f32():
    print("== test_scaler_e5m2_to_f32")

    # normal
    var e5m2_0 = Scalar[DType.float8e5m2](1.25)
    print(e5m2_0.cast[DType.float32]())
    var e5m2_1 = Scalar[DType.float8e5m2](-1.25)
    print(e5m2_1.cast[DType.float32]())
    var e5m2_2 = Scalar[DType.float8e5m2](256.0)
    print(e5m2_2.cast[DType.float32]())
    var e5m2_3 = Scalar[DType.float8e5m2](256.1)
    print(e5m2_3.cast[DType.float32]())
    var e5m2_4 = Scalar[DType.float8e5m2](-512.0)
    print(e5m2_4.cast[DType.float32]())
    var e5m2_5 = Scalar[DType.float8e5m2](-512.3)
    print(e5m2_5.cast[DType.float32]())

    # exponent = 0 and mantissa subnormal
    var e5m2_6 = bitcast[DType.float8e5m2](Scalar[DType.uint8](3))
    print(e5m2_6.cast[DType.float32]())
    var e5m2_7 = bitcast[DType.float8e5m2](Scalar[DType.uint8](131))
    print(e5m2_7.cast[DType.float32]())

    # sign-preserving zero
    var e5m2_8 = bitcast[DType.float8e5m2](Scalar[DType.uint8](0))
    print(e5m2_8.cast[DType.float32]())
    var e5m2_9 = bitcast[DType.float8e5m2](Scalar[DType.uint8](128))
    print(e5m2_9.cast[DType.float32]())

    # Sign-preserving infinity
    var e5m2_10 = bitcast[DType.float8e5m2](Scalar[DType.uint8](124))
    print(e5m2_10.cast[DType.float32]())
    var e5m2_11 = bitcast[DType.float8e5m2](Scalar[DType.uint8](252))
    print(e5m2_11.cast[DType.float32]())

    # Canonical NaN
    var e5m2_12 = bitcast[DType.float8e5m2](Scalar[DType.uint8](127))
    print(e5m2_12.cast[DType.float32]())
    var e5m2_13 = bitcast[DType.float8e5m2](Scalar[DType.uint8](255))
    print(e5m2_13.cast[DType.float32]())


# CHECK-LABEL: test_simd_e4m3_to_f32
# CHECK: 0.0, 0.001953125, 0.00390625, 0.005859375, 0.0078125, 0.009765625, 0.01171875, 0.013671875,
# CHECK: 0.015625, 0.017578125, 0.01953125, 0.021484375, 0.0234375, 0.025390625, 0.02734375, 0.029296875,
# CHECK: 0.03125, 0.03515625, 0.0390625, 0.04296875, 0.046875, 0.05078125, 0.0546875, 0.05859375,
# CHECK: 0.0625, 0.0703125, 0.078125, 0.0859375, 0.09375, 0.1015625, 0.109375, 0.1171875,
# CHECK: 0.125, 0.140625, 0.15625, 0.171875, 0.1875, 0.203125, 0.21875, 0.234375,
# CHECK: 0.25, 0.28125, 0.3125, 0.34375, 0.375, 0.40625, 0.4375, 0.46875,
# CHECK: 0.5, 0.5625, 0.625, 0.6875, 0.75, 0.8125, 0.875, 0.9375,
# CHECK: 1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875,
# CHECK: 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75,
# CHECK: 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5,
# CHECK: 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,
# CHECK: 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0,
# CHECK: 32.0, 36.0, 40.0, 44.0, 48.0, 52.0, 56.0, 60.0,
# CHECK: 64.0, 72.0, 80.0, 88.0, 96.0, 104.0, 112.0, 120.0,
# CHECK: 128.0, 144.0, 160.0, 176.0, 192.0, 208.0, 224.0, 240.0,
# CHECK: 256.0, 288.0, 320.0, 352.0, 384.0, 416.0, 448.0, nan,
# CHECK: -0.0, -0.001953125, -0.00390625, -0.005859375, -0.0078125, -0.009765625, -0.01171875, -0.013671875,
# CHECK: -0.015625, -0.017578125, -0.01953125, -0.021484375, -0.0234375, -0.025390625, -0.02734375, -0.029296875,
# CHECK: -0.03125, -0.03515625, -0.0390625, -0.04296875, -0.046875, -0.05078125, -0.0546875, -0.05859375,
# CHECK: -0.0625, -0.0703125, -0.078125, -0.0859375, -0.09375, -0.1015625, -0.109375, -0.1171875,
# CHECK: -0.125, -0.140625, -0.15625, -0.171875, -0.1875, -0.203125, -0.21875, -0.234375,
# CHECK: -0.25, -0.28125, -0.3125, -0.34375, -0.375, -0.40625, -0.4375, -0.46875,
# CHECK: -0.5, -0.5625, -0.625, -0.6875, -0.75, -0.8125, -0.875, -0.9375,
# CHECK: -1.0, -1.125, -1.25, -1.375, -1.5, -1.625, -1.75, -1.875,
# CHECK: -2.0, -2.25, -2.5, -2.75, -3.0, -3.25, -3.5, -3.75,
# CHECK: -4.0, -4.5, -5.0, -5.5, -6.0, -6.5, -7.0, -7.5,
# CHECK: -8.0, -9.0, -10.0, -11.0, -12.0, -13.0, -14.0, -15.0,
# CHECK: -16.0, -18.0, -20.0, -22.0, -24.0, -26.0, -28.0, -30.0,
# CHECK: -32.0, -36.0, -40.0, -44.0, -48.0, -52.0, -56.0, -60.0,
# CHECK: -64.0, -72.0, -80.0, -88.0, -96.0, -104.0, -112.0, -120.0,
# CHECK: -128.0, -144.0, -160.0, -176.0, -192.0, -208.0, -224.0, -240.0,
# CHECK: -256.0, -288.0, -320.0, -352.0, -384.0, -416.0, -448.0, nan,
fn test_simd_e4m3_to_f32():
    print("== test_simd_e4m3_to_f32")

    var e4m3_simd = SIMD[DType.float8e4m3, 256](0.0)

    for i in range(256):
        e4m3_simd[i] = bitcast[DType.float8e4m3](Scalar[DType.uint8](i))

    e4m3_casted_f32 = e4m3_simd.cast[DType.float32]()

    alias M = 32
    alias N = 8
    for i in range(M):
        for j in range(N):
            print(e4m3_casted_f32[i * N + j], end=", ")
        print("")


# CHECK-LABEL: test_simd_e5m2_to_f32
# CHECK: 0.0, 1.5258789e-05, 3.0517578e-05, 4.5776367e-05, 6.1035156e-05, 7.6293945e-05, 9.1552734e-05, 0.00010681152,
# CHECK: 0.00012207031, 0.00015258789, 0.00018310547, 0.00021362305, 0.00024414063, 0.00030517578, 0.00036621094, 0.0004272461,
# CHECK: 0.00048828125, 0.00061035156, 0.0007324219, 0.0008544922, 0.0009765625, 0.0012207031, 0.0014648438, 0.0017089844,
# CHECK: 0.001953125, 0.0024414062, 0.0029296875, 0.0034179688, 0.00390625, 0.0048828125, 0.005859375, 0.0068359375,
# CHECK: 0.0078125, 0.009765625, 0.01171875, 0.013671875, 0.015625, 0.01953125, 0.0234375, 0.02734375,
# CHECK: 0.03125, 0.0390625, 0.046875, 0.0546875, 0.0625, 0.078125, 0.09375, 0.109375,
# CHECK: 0.125, 0.15625, 0.1875, 0.21875, 0.25, 0.3125, 0.375, 0.4375,
# CHECK: 0.5, 0.625, 0.75, 0.875, 1.0, 1.25, 1.5, 1.75,
# CHECK: 2.0, 2.5, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0,
# CHECK: 8.0, 10.0, 12.0, 14.0, 16.0, 20.0, 24.0, 28.0,
# CHECK: 32.0, 40.0, 48.0, 56.0, 64.0, 80.0, 96.0, 112.0,
# CHECK: 128.0, 160.0, 192.0, 224.0, 256.0, 320.0, 384.0, 448.0,
# CHECK: 512.0, 640.0, 768.0, 896.0, 1024.0, 1280.0, 1536.0, 1792.0,
# CHECK: 2048.0, 2560.0, 3072.0, 3584.0, 4096.0, 5120.0, 6144.0, 7168.0,
# CHECK: 8192.0, 10240.0, 12288.0, 14336.0, 16384.0, 20480.0, 24576.0, 28672.0,
# CHECK: 32768.0, 40960.0, 49152.0, 57344.0, inf, nan, nan, nan,
# CHECK: -0.0, -1.5258789e-05, -3.0517578e-05, -4.5776367e-05, -6.1035156e-05, -7.6293945e-05, -9.1552734e-05, -0.00010681152,
# CHECK: -0.00012207031, -0.00015258789, -0.00018310547, -0.00021362305, -0.00024414063, -0.00030517578, -0.00036621094, -0.0004272461,
# CHECK: -0.00048828125, -0.00061035156, -0.0007324219, -0.0008544922, -0.0009765625, -0.0012207031, -0.0014648438, -0.0017089844,
# CHECK: -0.001953125, -0.0024414062, -0.0029296875, -0.0034179688, -0.00390625, -0.0048828125, -0.005859375, -0.0068359375,
# CHECK: -0.0078125, -0.009765625, -0.01171875, -0.013671875, -0.015625, -0.01953125, -0.0234375, -0.02734375,
# CHECK: -0.03125, -0.0390625, -0.046875, -0.0546875, -0.0625, -0.078125, -0.09375, -0.109375,
# CHECK: -0.125, -0.15625, -0.1875, -0.21875, -0.25, -0.3125, -0.375, -0.4375,
# CHECK: -0.5, -0.625, -0.75, -0.875, -1.0, -1.25, -1.5, -1.75,
# CHECK: -2.0, -2.5, -3.0, -3.5, -4.0, -5.0, -6.0, -7.0,
# CHECK: -8.0, -10.0, -12.0, -14.0, -16.0, -20.0, -24.0, -28.0,
# CHECK: -32.0, -40.0, -48.0, -56.0, -64.0, -80.0, -96.0, -112.0,
# CHECK: -128.0, -160.0, -192.0, -224.0, -256.0, -320.0, -384.0, -448.0,
# CHECK: -512.0, -640.0, -768.0, -896.0, -1024.0, -1280.0, -1536.0, -1792.0,
# CHECK: -2048.0, -2560.0, -3072.0, -3584.0, -4096.0, -5120.0, -6144.0, -7168.0,
# CHECK: -8192.0, -10240.0, -12288.0, -14336.0, -16384.0, -20480.0, -24576.0, -28672.0,
# CHECK: -32768.0, -40960.0, -49152.0, -57344.0, -inf, nan, nan, nan,
fn test_simd_e5m2_to_f32():
    print("== test_simd_e5m2_to_f32")

    var e5m2_simd = SIMD[DType.float8e5m2, 256](0.0)
    for i in range(256):
        e5m2_simd[i] = bitcast[DType.float8e5m2](Scalar[DType.uint8](i))

    e5m2_casted_f32 = e5m2_simd.cast[DType.float32]()

    alias M = 32
    alias N = 8
    for i in range(M):
        for j in range(N):
            print(e5m2_casted_f32[i * N + j], end=", ")
        print("")


# CHECK-LABEL: test_simd_e4m3_to_f16
# CHECK: 0.0, 0.001953125, 0.00390625, 0.005859375, 0.0078125, 0.009765625, 0.01171875, 0.013671875,
# CHECK: 0.015625, 0.017578125, 0.01953125, 0.021484375, 0.0234375, 0.025390625, 0.02734375, 0.029296875,
# CHECK: 0.03125, 0.03515625, 0.0390625, 0.04296875, 0.046875, 0.05078125, 0.0546875, 0.05859375,
# CHECK: 0.0625, 0.0703125, 0.078125, 0.0859375, 0.09375, 0.1015625, 0.109375, 0.1171875,
# CHECK: 0.125, 0.140625, 0.15625, 0.171875, 0.1875, 0.203125, 0.21875, 0.234375,
# CHECK: 0.25, 0.28125, 0.3125, 0.34375, 0.375, 0.40625, 0.4375, 0.46875,
# CHECK: 0.5, 0.5625, 0.625, 0.6875, 0.75, 0.8125, 0.875, 0.9375,
# CHECK: 1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875,
# CHECK: 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75,
# CHECK: 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5,
# CHECK: 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,
# CHECK: 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0,
# CHECK: 32.0, 36.0, 40.0, 44.0, 48.0, 52.0, 56.0, 60.0,
# CHECK: 64.0, 72.0, 80.0, 88.0, 96.0, 104.0, 112.0, 120.0,
# CHECK: 128.0, 144.0, 160.0, 176.0, 192.0, 208.0, 224.0, 240.0,
# CHECK: 256.0, 288.0, 320.0, 352.0, 384.0, 416.0, 448.0, nan,
# CHECK: -0.0, -0.001953125, -0.00390625, -0.005859375, -0.0078125, -0.009765625, -0.01171875, -0.013671875,
# CHECK: -0.015625, -0.017578125, -0.01953125, -0.021484375, -0.0234375, -0.025390625, -0.02734375, -0.029296875,
# CHECK: -0.03125, -0.03515625, -0.0390625, -0.04296875, -0.046875, -0.05078125, -0.0546875, -0.05859375,
# CHECK: -0.0625, -0.0703125, -0.078125, -0.0859375, -0.09375, -0.1015625, -0.109375, -0.1171875,
# CHECK: -0.125, -0.140625, -0.15625, -0.171875, -0.1875, -0.203125, -0.21875, -0.234375,
# CHECK: -0.25, -0.28125, -0.3125, -0.34375, -0.375, -0.40625, -0.4375, -0.46875,
# CHECK: -0.5, -0.5625, -0.625, -0.6875, -0.75, -0.8125, -0.875, -0.9375,
# CHECK: -1.0, -1.125, -1.25, -1.375, -1.5, -1.625, -1.75, -1.875,
# CHECK: -2.0, -2.25, -2.5, -2.75, -3.0, -3.25, -3.5, -3.75,
# CHECK: -4.0, -4.5, -5.0, -5.5, -6.0, -6.5, -7.0, -7.5,
# CHECK: -8.0, -9.0, -10.0, -11.0, -12.0, -13.0, -14.0, -15.0,
# CHECK: -16.0, -18.0, -20.0, -22.0, -24.0, -26.0, -28.0, -30.0,
# CHECK: -32.0, -36.0, -40.0, -44.0, -48.0, -52.0, -56.0, -60.0,
# CHECK: -64.0, -72.0, -80.0, -88.0, -96.0, -104.0, -112.0, -120.0,
# CHECK: -128.0, -144.0, -160.0, -176.0, -192.0, -208.0, -224.0, -240.0,
# CHECK: -256.0, -288.0, -320.0, -352.0, -384.0, -416.0, -448.0, nan,
fn test_simd_e4m3_to_f16():
    print("== test_simd_e4m3_to_f16")

    var e4m3_simd = SIMD[DType.float8e4m3, 256](0.0)

    for i in range(256):
        e4m3_simd[i] = bitcast[DType.float8e4m3](Scalar[DType.uint8](i))

    e4m3_casted_f16 = e4m3_simd.cast[DType.float16]()

    alias M = 32
    alias N = 8
    for i in range(M):
        for j in range(N):
            print(e4m3_casted_f16[i * N + j], end=", ")
        print("")


# CHECK-LABEL: test_simd_e5m2_to_f16
# CHECK: 0.0, 1.5258789e-05, 3.0517578e-05, 4.5776367e-05, 6.1035156e-05, 7.6293945e-05, 9.1552734e-05, 0.00010681152,
# CHECK: 0.00012207031, 0.00015258789, 0.00018310547, 0.00021362305, 0.00024414063, 0.00030517578, 0.00036621094, 0.0004272461,
# CHECK: 0.00048828125, 0.00061035156, 0.0007324219, 0.0008544922, 0.0009765625, 0.0012207031, 0.0014648438, 0.0017089844,
# CHECK: 0.001953125, 0.0024414062, 0.0029296875, 0.0034179688, 0.00390625, 0.0048828125, 0.005859375, 0.0068359375,
# CHECK: 0.0078125, 0.009765625, 0.01171875, 0.013671875, 0.015625, 0.01953125, 0.0234375, 0.02734375,
# CHECK: 0.03125, 0.0390625, 0.046875, 0.0546875, 0.0625, 0.078125, 0.09375, 0.109375,
# CHECK: 0.125, 0.15625, 0.1875, 0.21875, 0.25, 0.3125, 0.375, 0.4375,
# CHECK: 0.5, 0.625, 0.75, 0.875, 1.0, 1.25, 1.5, 1.75,
# CHECK: 2.0, 2.5, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0,
# CHECK: 8.0, 10.0, 12.0, 14.0, 16.0, 20.0, 24.0, 28.0,
# CHECK: 32.0, 40.0, 48.0, 56.0, 64.0, 80.0, 96.0, 112.0,
# CHECK: 128.0, 160.0, 192.0, 224.0, 256.0, 320.0, 384.0, 448.0,
# CHECK: 512.0, 640.0, 768.0, 896.0, 1024.0, 1280.0, 1536.0, 1792.0,
# CHECK: 2048.0, 2560.0, 3072.0, 3584.0, 4096.0, 5120.0, 6144.0, 7168.0,
# CHECK: 8192.0, 10240.0, 12288.0, 14336.0, 16384.0, 20480.0, 24576.0, 28672.0,
# CHECK: 32768.0, 40960.0, 49152.0, 57344.0, inf, nan, nan, nan,
# CHECK: -0.0, -1.5258789e-05, -3.0517578e-05, -4.5776367e-05, -6.1035156e-05, -7.6293945e-05, -9.1552734e-05, -0.00010681152,
# CHECK: -0.00012207031, -0.00015258789, -0.00018310547, -0.00021362305, -0.00024414063, -0.00030517578, -0.00036621094, -0.0004272461,
# CHECK: -0.00048828125, -0.00061035156, -0.0007324219, -0.0008544922, -0.0009765625, -0.0012207031, -0.0014648438, -0.0017089844,
# CHECK: -0.001953125, -0.0024414062, -0.0029296875, -0.0034179688, -0.00390625, -0.0048828125, -0.005859375, -0.0068359375,
# CHECK: -0.0078125, -0.009765625, -0.01171875, -0.013671875, -0.015625, -0.01953125, -0.0234375, -0.02734375,
# CHECK: -0.03125, -0.0390625, -0.046875, -0.0546875, -0.0625, -0.078125, -0.09375, -0.109375,
# CHECK: -0.125, -0.15625, -0.1875, -0.21875, -0.25, -0.3125, -0.375, -0.4375,
# CHECK: -0.5, -0.625, -0.75, -0.875, -1.0, -1.25, -1.5, -1.75,
# CHECK: -2.0, -2.5, -3.0, -3.5, -4.0, -5.0, -6.0, -7.0,
# CHECK: -8.0, -10.0, -12.0, -14.0, -16.0, -20.0, -24.0, -28.0,
# CHECK: -32.0, -40.0, -48.0, -56.0, -64.0, -80.0, -96.0, -112.0,
# CHECK: -128.0, -160.0, -192.0, -224.0, -256.0, -320.0, -384.0, -448.0,
# CHECK: -512.0, -640.0, -768.0, -896.0, -1024.0, -1280.0, -1536.0, -1792.0,
# CHECK: -2048.0, -2560.0, -3072.0, -3584.0, -4096.0, -5120.0, -6144.0, -7168.0,
# CHECK: -8192.0, -10240.0, -12288.0, -14336.0, -16384.0, -20480.0, -24576.0, -28672.0,
# CHECK: -32768.0, -40960.0, -49152.0, -57344.0, -inf, nan, nan, nan,
fn test_simd_e5m2_to_f16():
    print("== test_simd_e5m2_to_f16")

    var e5m2_simd = SIMD[DType.float8e5m2, 256](0.0)
    for i in range(256):
        e5m2_simd[i] = bitcast[DType.float8e5m2](Scalar[DType.uint8](i))

    e5m2_casted_f16 = e5m2_simd.cast[DType.float16]()

    alias M = 32
    alias N = 8
    for i in range(M):
        for j in range(N):
            print(e5m2_casted_f16[i * N + j], end=", ")
        print("")


# CHECK-LABEL: test_simd_e4m3_to_bf16
# CHECK: 0.0, 0.001953125, 0.00390625, 0.005859375, 0.0078125, 0.009765625, 0.01171875, 0.013671875,
# CHECK: 0.015625, 0.017578125, 0.01953125, 0.021484375, 0.0234375, 0.025390625, 0.02734375, 0.029296875,
# CHECK: 0.03125, 0.03515625, 0.0390625, 0.04296875, 0.046875, 0.05078125, 0.0546875, 0.05859375,
# CHECK: 0.0625, 0.0703125, 0.078125, 0.0859375, 0.09375, 0.1015625, 0.109375, 0.1171875,
# CHECK: 0.125, 0.140625, 0.15625, 0.171875, 0.1875, 0.203125, 0.21875, 0.234375,
# CHECK: 0.25, 0.28125, 0.3125, 0.34375, 0.375, 0.40625, 0.4375, 0.46875,
# CHECK: 0.5, 0.5625, 0.625, 0.6875, 0.75, 0.8125, 0.875, 0.9375,
# CHECK: 1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875,
# CHECK: 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75,
# CHECK: 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5,
# CHECK: 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,
# CHECK: 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0,
# CHECK: 32.0, 36.0, 40.0, 44.0, 48.0, 52.0, 56.0, 60.0,
# CHECK: 64.0, 72.0, 80.0, 88.0, 96.0, 104.0, 112.0, 120.0,
# CHECK: 128.0, 144.0, 160.0, 176.0, 192.0, 208.0, 224.0, 240.0,
# CHECK: 256.0, 288.0, 320.0, 352.0, 384.0, 416.0, 448.0, nan,
# CHECK: -0.0, -0.001953125, -0.00390625, -0.005859375, -0.0078125, -0.009765625, -0.01171875, -0.013671875,
# CHECK: -0.015625, -0.017578125, -0.01953125, -0.021484375, -0.0234375, -0.025390625, -0.02734375, -0.029296875,
# CHECK: -0.03125, -0.03515625, -0.0390625, -0.04296875, -0.046875, -0.05078125, -0.0546875, -0.05859375,
# CHECK: -0.0625, -0.0703125, -0.078125, -0.0859375, -0.09375, -0.1015625, -0.109375, -0.1171875,
# CHECK: -0.125, -0.140625, -0.15625, -0.171875, -0.1875, -0.203125, -0.21875, -0.234375,
# CHECK: -0.25, -0.28125, -0.3125, -0.34375, -0.375, -0.40625, -0.4375, -0.46875,
# CHECK: -0.5, -0.5625, -0.625, -0.6875, -0.75, -0.8125, -0.875, -0.9375,
# CHECK: -1.0, -1.125, -1.25, -1.375, -1.5, -1.625, -1.75, -1.875,
# CHECK: -2.0, -2.25, -2.5, -2.75, -3.0, -3.25, -3.5, -3.75,
# CHECK: -4.0, -4.5, -5.0, -5.5, -6.0, -6.5, -7.0, -7.5,
# CHECK: -8.0, -9.0, -10.0, -11.0, -12.0, -13.0, -14.0, -15.0,
# CHECK: -16.0, -18.0, -20.0, -22.0, -24.0, -26.0, -28.0, -30.0,
# CHECK: -32.0, -36.0, -40.0, -44.0, -48.0, -52.0, -56.0, -60.0,
# CHECK: -64.0, -72.0, -80.0, -88.0, -96.0, -104.0, -112.0, -120.0,
# CHECK: -128.0, -144.0, -160.0, -176.0, -192.0, -208.0, -224.0, -240.0,
# CHECK: -256.0, -288.0, -320.0, -352.0, -384.0, -416.0, -448.0, nan,
fn test_simd_e4m3_to_bf16():
    print("== test_simd_e4m3_to_bf16")

    var e4m3_simd = SIMD[DType.float8e4m3, 256](0.0)

    for i in range(256):
        e4m3_simd[i] = bitcast[DType.float8e4m3](Scalar[DType.uint8](i))

    e4m3_casted_bf16 = e4m3_simd.cast[DType.bfloat16]()

    alias M = 32
    alias N = 8
    for i in range(M):
        for j in range(N):
            print(e4m3_casted_bf16[i * N + j], end=", ")
        print("")


# CHECK-LABEL: test_simd_e5m2_to_bf16
# CHECK: 0.0, 1.5258789e-05, 3.0517578e-05, 4.5776367e-05, 6.1035156e-05, 7.6293945e-05, 9.1552734e-05, 0.00010681152,
# CHECK: 0.00012207031, 0.00015258789, 0.00018310547, 0.00021362305, 0.00024414063, 0.00030517578, 0.00036621094, 0.0004272461,
# CHECK: 0.00048828125, 0.00061035156, 0.0007324219, 0.0008544922, 0.0009765625, 0.0012207031, 0.0014648438, 0.0017089844,
# CHECK: 0.001953125, 0.0024414062, 0.0029296875, 0.0034179688, 0.00390625, 0.0048828125, 0.005859375, 0.0068359375,
# CHECK: 0.0078125, 0.009765625, 0.01171875, 0.013671875, 0.015625, 0.01953125, 0.0234375, 0.02734375,
# CHECK: 0.03125, 0.0390625, 0.046875, 0.0546875, 0.0625, 0.078125, 0.09375, 0.109375,
# CHECK: 0.125, 0.15625, 0.1875, 0.21875, 0.25, 0.3125, 0.375, 0.4375,
# CHECK: 0.5, 0.625, 0.75, 0.875, 1.0, 1.25, 1.5, 1.75,
# CHECK: 2.0, 2.5, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0,
# CHECK: 8.0, 10.0, 12.0, 14.0, 16.0, 20.0, 24.0, 28.0,
# CHECK: 32.0, 40.0, 48.0, 56.0, 64.0, 80.0, 96.0, 112.0,
# CHECK: 128.0, 160.0, 192.0, 224.0, 256.0, 320.0, 384.0, 448.0,
# CHECK: 512.0, 640.0, 768.0, 896.0, 1024.0, 1280.0, 1536.0, 1792.0,
# CHECK: 2048.0, 2560.0, 3072.0, 3584.0, 4096.0, 5120.0, 6144.0, 7168.0,
# CHECK: 8192.0, 10240.0, 12288.0, 14336.0, 16384.0, 20480.0, 24576.0, 28672.0,
# CHECK: 32768.0, 40960.0, 49152.0, 57344.0, inf, nan, nan, nan,
# CHECK: -0.0, -1.5258789e-05, -3.0517578e-05, -4.5776367e-05, -6.1035156e-05, -7.6293945e-05, -9.1552734e-05, -0.00010681152,
# CHECK: -0.00012207031, -0.00015258789, -0.00018310547, -0.00021362305, -0.00024414063, -0.00030517578, -0.00036621094, -0.0004272461,
# CHECK: -0.00048828125, -0.00061035156, -0.0007324219, -0.0008544922, -0.0009765625, -0.0012207031, -0.0014648438, -0.0017089844,
# CHECK: -0.001953125, -0.0024414062, -0.0029296875, -0.0034179688, -0.00390625, -0.0048828125, -0.005859375, -0.0068359375,
# CHECK: -0.0078125, -0.009765625, -0.01171875, -0.013671875, -0.015625, -0.01953125, -0.0234375, -0.02734375,
# CHECK: -0.03125, -0.0390625, -0.046875, -0.0546875, -0.0625, -0.078125, -0.09375, -0.109375,
# CHECK: -0.125, -0.15625, -0.1875, -0.21875, -0.25, -0.3125, -0.375, -0.4375,
# CHECK: -0.5, -0.625, -0.75, -0.875, -1.0, -1.25, -1.5, -1.75,
# CHECK: -2.0, -2.5, -3.0, -3.5, -4.0, -5.0, -6.0, -7.0,
# CHECK: -8.0, -10.0, -12.0, -14.0, -16.0, -20.0, -24.0, -28.0,
# CHECK: -32.0, -40.0, -48.0, -56.0, -64.0, -80.0, -96.0, -112.0,
# CHECK: -128.0, -160.0, -192.0, -224.0, -256.0, -320.0, -384.0, -448.0,
# CHECK: -512.0, -640.0, -768.0, -896.0, -1024.0, -1280.0, -1536.0, -1792.0,
# CHECK: -2048.0, -2560.0, -3072.0, -3584.0, -4096.0, -5120.0, -6144.0, -7168.0,
# CHECK: -8192.0, -10240.0, -12288.0, -14336.0, -16384.0, -20480.0, -24576.0, -28672.0,
# CHECK: -32768.0, -40960.0, -49152.0, -57344.0, -inf, nan, nan, nan,
fn test_simd_e5m2_to_bf16():
    print("== test_simd_e5m2_to_bf16")

    var e5m2_simd = SIMD[DType.float8e5m2, 256](0.0)
    for i in range(256):
        e5m2_simd[i] = bitcast[DType.float8e5m2](Scalar[DType.uint8](i))

    e5m2_casted_bf16 = e5m2_simd.cast[DType.bfloat16]()

    alias M = 32
    alias N = 8
    for i in range(M):
        for j in range(N):
            print(e5m2_casted_bf16[i * N + j], end=", ")
        print("")


# CHECK-LABEL: test_simd_f32_to_e4m3
# CHECK: -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0,
# CHECK: -256.0, -240.0, -240.0, -240.0, -240.0, -240.0, -240.0, -240.0,
# CHECK: -240.0, -240.0, -240.0, -240.0, -240.0, -240.0, -240.0, -240.0,
# CHECK: -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -224.0, -208.0, -208.0, -208.0, -208.0, -208.0, -208.0, -208.0,
# CHECK: -208.0, -208.0, -208.0, -208.0, -208.0, -208.0, -208.0, -208.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -176.0, -176.0, -176.0, -176.0, -176.0, -176.0, -176.0,
# CHECK: -176.0, -176.0, -176.0, -176.0, -176.0, -176.0, -176.0, -176.0,
# CHECK: -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -160.0, -144.0, -144.0, -144.0, -144.0, -144.0, -144.0, -144.0,
# CHECK: -144.0, -144.0, -144.0, -144.0, -144.0, -144.0, -144.0, -144.0,
# CHECK: -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0,
# CHECK: -128.0, -128.0, -128.0, -128.0, -128.0, -120.0, -120.0, -120.0,
# CHECK: -120.0, -120.0, -120.0, -120.0, -112.0, -112.0, -112.0, -112.0,
# CHECK: -112.0, -112.0, -112.0, -112.0, -112.0, -104.0, -104.0, -104.0,
# CHECK: -104.0, -104.0, -104.0, -104.0, -96.0, -96.0, -96.0, -96.0,
# CHECK: -96.0, -96.0, -96.0, -96.0, -96.0, -88.0, -88.0, -88.0,
# CHECK: -88.0, -88.0, -88.0, -88.0, -80.0, -80.0, -80.0, -80.0,
# CHECK: -80.0, -80.0, -80.0, -80.0, -80.0, -72.0, -72.0, -72.0,
# CHECK: -72.0, -72.0, -72.0, -72.0, -64.0, -64.0, -64.0, -64.0,
# CHECK: -64.0, -64.0, -64.0, -60.0, -60.0, -60.0, -56.0, -56.0,
# CHECK: -56.0, -56.0, -56.0, -52.0, -52.0, -52.0, -48.0, -48.0,
# CHECK: -48.0, -48.0, -48.0, -44.0, -44.0, -44.0, -40.0, -40.0,
# CHECK: -40.0, -40.0, -40.0, -36.0, -36.0, -36.0, -32.0, -32.0,
# CHECK: -32.0, -32.0, -30.0, -28.0, -28.0, -28.0, -26.0, -24.0,
# CHECK: -24.0, -24.0, -22.0, -20.0, -20.0, -20.0, -18.0, -16.0,
# CHECK: -16.0, -15.0, -14.0, -13.0, -12.0, -11.0, -10.0, -9.0,
# CHECK: -8.0, -7.0, -6.0, -5.0, -4.0, -3.0, -2.0, -1.0,
# CHECK: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,
# CHECK: 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,
# CHECK: 16.0, 16.0, 18.0, 20.0, 20.0, 20.0, 22.0, 24.0,
# CHECK: 24.0, 24.0, 26.0, 28.0, 28.0, 28.0, 30.0, 32.0,
# CHECK: 32.0, 32.0, 32.0, 36.0, 36.0, 36.0, 40.0, 40.0,
# CHECK: 40.0, 40.0, 40.0, 44.0, 44.0, 44.0, 48.0, 48.0,
# CHECK: 48.0, 48.0, 48.0, 52.0, 52.0, 52.0, 56.0, 56.0,
# CHECK: 56.0, 56.0, 56.0, 60.0, 60.0, 60.0, 64.0, 64.0,
# CHECK: 64.0, 64.0, 64.0, 64.0, 64.0, 72.0, 72.0, 72.0,
# CHECK: 72.0, 72.0, 72.0, 72.0, 80.0, 80.0, 80.0, 80.0,
# CHECK: 80.0, 80.0, 80.0, 80.0, 80.0, 88.0, 88.0, 88.0,
# CHECK: 88.0, 88.0, 88.0, 88.0, 96.0, 96.0, 96.0, 96.0,
# CHECK: 96.0, 96.0, 96.0, 96.0, 96.0, 104.0, 104.0, 104.0,
# CHECK: 104.0, 104.0, 104.0, 104.0, 112.0, 112.0, 112.0, 112.0,
# CHECK: 112.0, 112.0, 112.0, 112.0, 112.0, 120.0, 120.0, 120.0,
# CHECK: 120.0, 120.0, 120.0, 120.0, 128.0, 128.0, 128.0, 128.0,
# CHECK: 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0,
# CHECK: 128.0, 144.0, 144.0, 144.0, 144.0, 144.0, 144.0, 144.0,
# CHECK: 144.0, 144.0, 144.0, 144.0, 144.0, 144.0, 144.0, 144.0,
# CHECK: 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 160.0, 176.0, 176.0, 176.0, 176.0, 176.0, 176.0, 176.0,
# CHECK: 176.0, 176.0, 176.0, 176.0, 176.0, 176.0, 176.0, 176.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 208.0, 208.0, 208.0, 208.0, 208.0, 208.0, 208.0,
# CHECK: 208.0, 208.0, 208.0, 208.0, 208.0, 208.0, 208.0, 208.0,
# CHECK: 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 224.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0,
# CHECK: 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0,
# CHECK: 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0,
fn test_simd_f32_to_e4m3():
    print("== test_simd_f32_to_e4m3")

    alias M = 512
    var f32_simd = SIMD[DType.float32, M](0.0)

    for i in range(M):
        f32_simd[i] = i - 256

    f32_casted_e4m3 = f32_simd.cast[DType.float8e4m3]()

    for i in range(64):
        for j in range(8):
            print(f32_casted_e4m3[i * 8 + j], end=", ")
        print("")


# CHECK-LABEL: test_simd_f32_to_e5m2
# CHECK: -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0,
# CHECK: -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0,
# CHECK: -256.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0,
# CHECK: -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0,
# CHECK: -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0,
# CHECK: -128.0, -112.0, -112.0, -112.0, -112.0, -112.0, -112.0, -112.0,
# CHECK: -112.0, -112.0, -112.0, -112.0, -112.0, -112.0, -112.0, -112.0,
# CHECK: -96.0, -96.0, -96.0, -96.0, -96.0, -96.0, -96.0, -96.0,
# CHECK: -96.0, -96.0, -96.0, -96.0, -96.0, -96.0, -96.0, -96.0,
# CHECK: -96.0, -80.0, -80.0, -80.0, -80.0, -80.0, -80.0, -80.0,
# CHECK: -80.0, -80.0, -80.0, -80.0, -80.0, -80.0, -80.0, -80.0,
# CHECK: -64.0, -64.0, -64.0, -64.0, -64.0, -64.0, -64.0, -64.0,
# CHECK: -64.0, -64.0, -64.0, -64.0, -64.0, -56.0, -56.0, -56.0,
# CHECK: -56.0, -56.0, -56.0, -56.0, -48.0, -48.0, -48.0, -48.0,
# CHECK: -48.0, -48.0, -48.0, -48.0, -48.0, -40.0, -40.0, -40.0,
# CHECK: -40.0, -40.0, -40.0, -40.0, -32.0, -32.0, -32.0, -32.0,
# CHECK: -32.0, -32.0, -32.0, -28.0, -28.0, -28.0, -24.0, -24.0,
# CHECK: -24.0, -24.0, -24.0, -20.0, -20.0, -20.0, -16.0, -16.0,
# CHECK: -16.0, -16.0, -14.0, -12.0, -12.0, -12.0, -10.0, -8.0,
# CHECK: -8.0, -7.0, -6.0, -5.0, -4.0, -3.0, -2.0, -1.0,
# CHECK: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,
# CHECK: 8.0, 8.0, 10.0, 12.0, 12.0, 12.0, 14.0, 16.0,
# CHECK: 16.0, 16.0, 16.0, 20.0, 20.0, 20.0, 24.0, 24.0,
# CHECK: 24.0, 24.0, 24.0, 28.0, 28.0, 28.0, 32.0, 32.0,
# CHECK: 32.0, 32.0, 32.0, 32.0, 32.0, 40.0, 40.0, 40.0,
# CHECK: 40.0, 40.0, 40.0, 40.0, 48.0, 48.0, 48.0, 48.0,
# CHECK: 48.0, 48.0, 48.0, 48.0, 48.0, 56.0, 56.0, 56.0,
# CHECK: 56.0, 56.0, 56.0, 56.0, 64.0, 64.0, 64.0, 64.0,
# CHECK: 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0,
# CHECK: 64.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0,
# CHECK: 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0,
# CHECK: 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0,
# CHECK: 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0,
# CHECK: 96.0, 112.0, 112.0, 112.0, 112.0, 112.0, 112.0, 112.0,
# CHECK: 112.0, 112.0, 112.0, 112.0, 112.0, 112.0, 112.0, 112.0,
# CHECK: 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0,
# CHECK: 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0,
# CHECK: 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0,
# CHECK: 128.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0,
# CHECK: 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0,
fn test_simd_f32_to_e5m2():
    print("== test_simd_f32_to_e5m2")

    alias M = 512
    var f32_simd = SIMD[DType.float32, M](0.0)

    for i in range(M):
        f32_simd[i] = i - 256

    f32_casted_e5m2 = f32_simd.cast[DType.float8e5m2]()

    for i in range(64):
        for j in range(8):
            print(f32_casted_e5m2[i * 8 + j], end=", ")
        print("")


fn test_simd_float8[
    type: DType,
    size: Int,
    target: DType,
](x: SIMD[type, size]):
    var x_casted = x.cast[target]()

    alias M = 32
    alias N = size // M
    for i in range(M):
        for j in range(N):
            print(x_casted[i * N + j], end=", ")
        print("")


# CHECK-LABEL: test_simd_e4m3_to_f16_ptx_path
# CHECK: 0.0, 0.001953125, 0.00390625, 0.005859375, 0.0078125, 0.009765625, 0.01171875, 0.013671875,
# CHECK: 0.015625, 0.017578125, 0.01953125, 0.021484375, 0.0234375, 0.025390625, 0.02734375, 0.029296875,
# CHECK: 0.03125, 0.03515625, 0.0390625, 0.04296875, 0.046875, 0.05078125, 0.0546875, 0.05859375,
# CHECK: 0.0625, 0.0703125, 0.078125, 0.0859375, 0.09375, 0.1015625, 0.109375, 0.1171875,
# CHECK: 0.125, 0.140625, 0.15625, 0.171875, 0.1875, 0.203125, 0.21875, 0.234375,
# CHECK: 0.25, 0.28125, 0.3125, 0.34375, 0.375, 0.40625, 0.4375, 0.46875,
# CHECK: 0.5, 0.5625, 0.625, 0.6875, 0.75, 0.8125, 0.875, 0.9375,
# CHECK: 1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875,
# CHECK: 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75,
# CHECK: 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5,
# CHECK: 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,
# CHECK: 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0,
# CHECK: 32.0, 36.0, 40.0, 44.0, 48.0, 52.0, 56.0, 60.0,
# CHECK: 64.0, 72.0, 80.0, 88.0, 96.0, 104.0, 112.0, 120.0,
# CHECK: 128.0, 144.0, 160.0, 176.0, 192.0, 208.0, 224.0, 240.0,
# CHECK: 256.0, 288.0, 320.0, 352.0, 384.0, 416.0, 448.0, nan,
# CHECK: -0.0, -0.001953125, -0.00390625, -0.005859375, -0.0078125, -0.009765625, -0.01171875, -0.013671875,
# CHECK: -0.015625, -0.017578125, -0.01953125, -0.021484375, -0.0234375, -0.025390625, -0.02734375, -0.029296875,
# CHECK: -0.03125, -0.03515625, -0.0390625, -0.04296875, -0.046875, -0.05078125, -0.0546875, -0.05859375,
# CHECK: -0.0625, -0.0703125, -0.078125, -0.0859375, -0.09375, -0.1015625, -0.109375, -0.1171875,
# CHECK: -0.125, -0.140625, -0.15625, -0.171875, -0.1875, -0.203125, -0.21875, -0.234375,
# CHECK: -0.25, -0.28125, -0.3125, -0.34375, -0.375, -0.40625, -0.4375, -0.46875,
# CHECK: -0.5, -0.5625, -0.625, -0.6875, -0.75, -0.8125, -0.875, -0.9375,
# CHECK: -1.0, -1.125, -1.25, -1.375, -1.5, -1.625, -1.75, -1.875,
# CHECK: -2.0, -2.25, -2.5, -2.75, -3.0, -3.25, -3.5, -3.75,
# CHECK: -4.0, -4.5, -5.0, -5.5, -6.0, -6.5, -7.0, -7.5,
# CHECK: -8.0, -9.0, -10.0, -11.0, -12.0, -13.0, -14.0, -15.0,
# CHECK: -16.0, -18.0, -20.0, -22.0, -24.0, -26.0, -28.0, -30.0,
# CHECK: -32.0, -36.0, -40.0, -44.0, -48.0, -52.0, -56.0, -60.0,
# CHECK: -64.0, -72.0, -80.0, -88.0, -96.0, -104.0, -112.0, -120.0,
# CHECK: -128.0, -144.0, -160.0, -176.0, -192.0, -208.0, -224.0, -240.0,
# CHECK: -256.0, -288.0, -320.0, -352.0, -384.0, -416.0, -448.0, nan,
fn test_simd_e4m3_to_f16_ptx_path(ctx: DeviceContext) raises:
    print("== test_simd_e4m3_to_f16_ptx_path")

    alias M = 256
    var e4m3_simd = SIMD[DType.float8e4m3, M](0.0)
    for i in range(M):
        e4m3_simd[i] = bitcast[DType.float8e4m3](Scalar[DType.uint8](i))

    alias test_simd_e4m3_to_f16_fn = test_simd_float8[
        DType.float8e4m3, M, DType.float16
    ]

    var compiled_test_simd_e4m3_to_f16_fn = ctx.compile_function[
        test_simd_e4m3_to_f16_fn, _target = _get_gpu_target["sm_90"]()
    ]()
    ctx.enqueue_function(
        compiled_test_simd_e4m3_to_f16_fn, e4m3_simd, grid_dim=1, block_dim=1
    )
    ctx.synchronize()


# CHECK-LABEL: test_simd_e5m2_to_f16_ptx_path
# CHECK: 0.0, 1.5258789e-05, 3.0517578e-05, 4.5776367e-05, 6.1035156e-05, 7.6293945e-05, 9.1552734e-05, 0.00010681152,
# CHECK: 0.00012207031, 0.00015258789, 0.00018310547, 0.00021362305, 0.00024414063, 0.00030517578, 0.00036621094, 0.0004272461,
# CHECK: 0.00048828125, 0.00061035156, 0.0007324219, 0.0008544922, 0.0009765625, 0.0012207031, 0.0014648438, 0.0017089844,
# CHECK: 0.001953125, 0.0024414062, 0.0029296875, 0.0034179688, 0.00390625, 0.0048828125, 0.005859375, 0.0068359375,
# CHECK: 0.0078125, 0.009765625, 0.01171875, 0.013671875, 0.015625, 0.01953125, 0.0234375, 0.02734375,
# CHECK: 0.03125, 0.0390625, 0.046875, 0.0546875, 0.0625, 0.078125, 0.09375, 0.109375,
# CHECK: 0.125, 0.15625, 0.1875, 0.21875, 0.25, 0.3125, 0.375, 0.4375,
# CHECK: 0.5, 0.625, 0.75, 0.875, 1.0, 1.25, 1.5, 1.75,
# CHECK: 2.0, 2.5, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0,
# CHECK: 8.0, 10.0, 12.0, 14.0, 16.0, 20.0, 24.0, 28.0,
# CHECK: 32.0, 40.0, 48.0, 56.0, 64.0, 80.0, 96.0, 112.0,
# CHECK: 128.0, 160.0, 192.0, 224.0, 256.0, 320.0, 384.0, 448.0,
# CHECK: 512.0, 640.0, 768.0, 896.0, 1024.0, 1280.0, 1536.0, 1792.0,
# CHECK: 2048.0, 2560.0, 3072.0, 3584.0, 4096.0, 5120.0, 6144.0, 7168.0,
# CHECK: 8192.0, 10240.0, 12288.0, 14336.0, 16384.0, 20480.0, 24576.0, 28672.0,
# CHECK: 32768.0, 40960.0, 49152.0, 57344.0, inf, nan, nan, nan,
# CHECK: -0.0, -1.5258789e-05, -3.0517578e-05, -4.5776367e-05, -6.1035156e-05, -7.6293945e-05, -9.1552734e-05, -0.00010681152,
# CHECK: -0.00012207031, -0.00015258789, -0.00018310547, -0.00021362305, -0.00024414063, -0.00030517578, -0.00036621094, -0.0004272461,
# CHECK: -0.00048828125, -0.00061035156, -0.0007324219, -0.0008544922, -0.0009765625, -0.0012207031, -0.0014648438, -0.0017089844,
# CHECK: -0.001953125, -0.0024414062, -0.0029296875, -0.0034179688, -0.00390625, -0.0048828125, -0.005859375, -0.0068359375,
# CHECK: -0.0078125, -0.009765625, -0.01171875, -0.013671875, -0.015625, -0.01953125, -0.0234375, -0.02734375,
# CHECK: -0.03125, -0.0390625, -0.046875, -0.0546875, -0.0625, -0.078125, -0.09375, -0.109375,
# CHECK: -0.125, -0.15625, -0.1875, -0.21875, -0.25, -0.3125, -0.375, -0.4375,
# CHECK: -0.5, -0.625, -0.75, -0.875, -1.0, -1.25, -1.5, -1.75,
# CHECK: -2.0, -2.5, -3.0, -3.5, -4.0, -5.0, -6.0, -7.0,
# CHECK: -8.0, -10.0, -12.0, -14.0, -16.0, -20.0, -24.0, -28.0,
# CHECK: -32.0, -40.0, -48.0, -56.0, -64.0, -80.0, -96.0, -112.0,
# CHECK: -128.0, -160.0, -192.0, -224.0, -256.0, -320.0, -384.0, -448.0,
# CHECK: -512.0, -640.0, -768.0, -896.0, -1024.0, -1280.0, -1536.0, -1792.0,
# CHECK: -2048.0, -2560.0, -3072.0, -3584.0, -4096.0, -5120.0, -6144.0, -7168.0,
# CHECK: -8192.0, -10240.0, -12288.0, -14336.0, -16384.0, -20480.0, -24576.0, -28672.0,
# CHECK: -32768.0, -40960.0, -49152.0, -57344.0, -inf, nan, nan, nan,
fn test_simd_e5m2_to_f16_ptx_path(ctx: DeviceContext) raises:
    print("== test_simd_e5m2_to_f16_ptx_path")

    alias M = 256
    var e5m2_simd = SIMD[DType.float8e5m2, M](0.0)
    for i in range(M):
        e5m2_simd[i] = bitcast[DType.float8e5m2](Scalar[DType.uint8](i))

    alias test_simd_e5m2_to_f16_fn = test_simd_float8[
        DType.float8e5m2, M, DType.float16
    ]

    var compiled_test_simd_e5m2_to_f16_fn = ctx.compile_function[
        test_simd_e5m2_to_f16_fn, _target = _get_gpu_target["sm_90"]()
    ]()
    ctx.enqueue_function(
        compiled_test_simd_e5m2_to_f16_fn, e5m2_simd, grid_dim=1, block_dim=1
    )
    ctx.synchronize()


# CHECK-LABEL: test_simd_e4m3_to_f32_ptx_path
# CHECK: 0.0, 0.001953125, 0.00390625, 0.005859375, 0.0078125, 0.009765625, 0.01171875, 0.013671875,
# CHECK: 0.015625, 0.017578125, 0.01953125, 0.021484375, 0.0234375, 0.025390625, 0.02734375, 0.029296875,
# CHECK: 0.03125, 0.03515625, 0.0390625, 0.04296875, 0.046875, 0.05078125, 0.0546875, 0.05859375,
# CHECK: 0.0625, 0.0703125, 0.078125, 0.0859375, 0.09375, 0.1015625, 0.109375, 0.1171875,
# CHECK: 0.125, 0.140625, 0.15625, 0.171875, 0.1875, 0.203125, 0.21875, 0.234375,
# CHECK: 0.25, 0.28125, 0.3125, 0.34375, 0.375, 0.40625, 0.4375, 0.46875,
# CHECK: 0.5, 0.5625, 0.625, 0.6875, 0.75, 0.8125, 0.875, 0.9375,
# CHECK: 1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875,
# CHECK: 2.0, 2.25, 2.5, 2.75, 3.0, 3.25, 3.5, 3.75,
# CHECK: 4.0, 4.5, 5.0, 5.5, 6.0, 6.5, 7.0, 7.5,
# CHECK: 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,
# CHECK: 16.0, 18.0, 20.0, 22.0, 24.0, 26.0, 28.0, 30.0,
# CHECK: 32.0, 36.0, 40.0, 44.0, 48.0, 52.0, 56.0, 60.0,
# CHECK: 64.0, 72.0, 80.0, 88.0, 96.0, 104.0, 112.0, 120.0,
# CHECK: 128.0, 144.0, 160.0, 176.0, 192.0, 208.0, 224.0, 240.0,
# CHECK: 256.0, 288.0, 320.0, 352.0, 384.0, 416.0, 448.0, nan,
# CHECK: -0.0, -0.001953125, -0.00390625, -0.005859375, -0.0078125, -0.009765625, -0.01171875, -0.013671875,
# CHECK: -0.015625, -0.017578125, -0.01953125, -0.021484375, -0.0234375, -0.025390625, -0.02734375, -0.029296875,
# CHECK: -0.03125, -0.03515625, -0.0390625, -0.04296875, -0.046875, -0.05078125, -0.0546875, -0.05859375,
# CHECK: -0.0625, -0.0703125, -0.078125, -0.0859375, -0.09375, -0.1015625, -0.109375, -0.1171875,
# CHECK: -0.125, -0.140625, -0.15625, -0.171875, -0.1875, -0.203125, -0.21875, -0.234375,
# CHECK: -0.25, -0.28125, -0.3125, -0.34375, -0.375, -0.40625, -0.4375, -0.46875,
# CHECK: -0.5, -0.5625, -0.625, -0.6875, -0.75, -0.8125, -0.875, -0.9375,
# CHECK: -1.0, -1.125, -1.25, -1.375, -1.5, -1.625, -1.75, -1.875,
# CHECK: -2.0, -2.25, -2.5, -2.75, -3.0, -3.25, -3.5, -3.75,
# CHECK: -4.0, -4.5, -5.0, -5.5, -6.0, -6.5, -7.0, -7.5,
# CHECK: -8.0, -9.0, -10.0, -11.0, -12.0, -13.0, -14.0, -15.0,
# CHECK: -16.0, -18.0, -20.0, -22.0, -24.0, -26.0, -28.0, -30.0,
# CHECK: -32.0, -36.0, -40.0, -44.0, -48.0, -52.0, -56.0, -60.0,
# CHECK: -64.0, -72.0, -80.0, -88.0, -96.0, -104.0, -112.0, -120.0,
# CHECK: -128.0, -144.0, -160.0, -176.0, -192.0, -208.0, -224.0, -240.0,
# CHECK: -256.0, -288.0, -320.0, -352.0, -384.0, -416.0, -448.0, nan,
fn test_simd_e4m3_to_f32_ptx_path(ctx: DeviceContext) raises:
    print("== test_simd_e4m3_to_f32_ptx_path")

    alias M = 256
    var e4m3_simd = SIMD[DType.float8e4m3, M](0.0)
    for i in range(M):
        e4m3_simd[i] = bitcast[DType.float8e4m3](Scalar[DType.uint8](i))

    alias test_simd_e4m3_to_f32_fn = test_simd_float8[
        DType.float8e4m3, M, DType.float32
    ]

    var compiled_test_simd_e4m3_to_f32_fn = ctx.compile_function[
        test_simd_e4m3_to_f32_fn, _target = _get_gpu_target["sm_90"]()
    ]()
    ctx.enqueue_function(
        compiled_test_simd_e4m3_to_f32_fn, e4m3_simd, grid_dim=1, block_dim=1
    )
    ctx.synchronize()


# CHECK-LABEL: test_simd_e5m2_to_f32_ptx_path
# CHECK: 0.0, 1.5258789e-05, 3.0517578e-05, 4.5776367e-05, 6.1035156e-05, 7.6293945e-05, 9.1552734e-05, 0.00010681152,
# CHECK: 0.00012207031, 0.00015258789, 0.00018310547, 0.00021362305, 0.00024414063, 0.00030517578, 0.00036621094, 0.0004272461,
# CHECK: 0.00048828125, 0.00061035156, 0.0007324219, 0.0008544922, 0.0009765625, 0.0012207031, 0.0014648438, 0.0017089844,
# CHECK: 0.001953125, 0.0024414062, 0.0029296875, 0.0034179688, 0.00390625, 0.0048828125, 0.005859375, 0.0068359375,
# CHECK: 0.0078125, 0.009765625, 0.01171875, 0.013671875, 0.015625, 0.01953125, 0.0234375, 0.02734375,
# CHECK: 0.03125, 0.0390625, 0.046875, 0.0546875, 0.0625, 0.078125, 0.09375, 0.109375,
# CHECK: 0.125, 0.15625, 0.1875, 0.21875, 0.25, 0.3125, 0.375, 0.4375,
# CHECK: 0.5, 0.625, 0.75, 0.875, 1.0, 1.25, 1.5, 1.75,
# CHECK: 2.0, 2.5, 3.0, 3.5, 4.0, 5.0, 6.0, 7.0,
# CHECK: 8.0, 10.0, 12.0, 14.0, 16.0, 20.0, 24.0, 28.0,
# CHECK: 32.0, 40.0, 48.0, 56.0, 64.0, 80.0, 96.0, 112.0,
# CHECK: 128.0, 160.0, 192.0, 224.0, 256.0, 320.0, 384.0, 448.0,
# CHECK: 512.0, 640.0, 768.0, 896.0, 1024.0, 1280.0, 1536.0, 1792.0,
# CHECK: 2048.0, 2560.0, 3072.0, 3584.0, 4096.0, 5120.0, 6144.0, 7168.0,
# CHECK: 8192.0, 10240.0, 12288.0, 14336.0, 16384.0, 20480.0, 24576.0, 28672.0,
# CHECK: 32768.0, 40960.0, 49152.0, 57344.0, inf, nan, nan, nan,
# CHECK: -0.0, -1.5258789e-05, -3.0517578e-05, -4.5776367e-05, -6.1035156e-05, -7.6293945e-05, -9.1552734e-05, -0.00010681152,
# CHECK: -0.00012207031, -0.00015258789, -0.00018310547, -0.00021362305, -0.00024414063, -0.00030517578, -0.00036621094, -0.0004272461,
# CHECK: -0.00048828125, -0.00061035156, -0.0007324219, -0.0008544922, -0.0009765625, -0.0012207031, -0.0014648438, -0.0017089844,
# CHECK: -0.001953125, -0.0024414062, -0.0029296875, -0.0034179688, -0.00390625, -0.0048828125, -0.005859375, -0.0068359375,
# CHECK: -0.0078125, -0.009765625, -0.01171875, -0.013671875, -0.015625, -0.01953125, -0.0234375, -0.02734375,
# CHECK: -0.03125, -0.0390625, -0.046875, -0.0546875, -0.0625, -0.078125, -0.09375, -0.109375,
# CHECK: -0.125, -0.15625, -0.1875, -0.21875, -0.25, -0.3125, -0.375, -0.4375,
# CHECK: -0.5, -0.625, -0.75, -0.875, -1.0, -1.25, -1.5, -1.75,
# CHECK: -2.0, -2.5, -3.0, -3.5, -4.0, -5.0, -6.0, -7.0,
# CHECK: -8.0, -10.0, -12.0, -14.0, -16.0, -20.0, -24.0, -28.0,
# CHECK: -32.0, -40.0, -48.0, -56.0, -64.0, -80.0, -96.0, -112.0,
# CHECK: -128.0, -160.0, -192.0, -224.0, -256.0, -320.0, -384.0, -448.0,
# CHECK: -512.0, -640.0, -768.0, -896.0, -1024.0, -1280.0, -1536.0, -1792.0,
# CHECK: -2048.0, -2560.0, -3072.0, -3584.0, -4096.0, -5120.0, -6144.0, -7168.0,
# CHECK: -8192.0, -10240.0, -12288.0, -14336.0, -16384.0, -20480.0, -24576.0, -28672.0,
# CHECK: -32768.0, -40960.0, -49152.0, -57344.0, -inf, nan, nan, nan,
fn test_simd_e5m2_to_f32_ptx_path(ctx: DeviceContext) raises:
    print("== test_simd_e5m2_to_f32_ptx_path")

    alias M = 256
    var e5m2_simd = SIMD[DType.float8e5m2, M](0.0)
    for i in range(M):
        e5m2_simd[i] = bitcast[DType.float8e5m2](Scalar[DType.uint8](i))

    alias test_simd_e5m2_to_f32_fn = test_simd_float8[
        DType.float8e5m2, M, DType.float32
    ]

    var compiled_test_simd_e5m2_to_f32_fn = ctx.compile_function[
        test_simd_e5m2_to_f32_fn, _target = _get_gpu_target["sm_90"]()
    ]()
    ctx.enqueue_function(
        compiled_test_simd_e5m2_to_f32_fn, e5m2_simd, grid_dim=1, block_dim=1
    )
    ctx.synchronize()


fn test_simd_float32[
    size: Int,
    target: DType,
](x: SIMD[DType.float32, size]):
    var x_casted = x.cast[target]()

    alias M = 64
    alias N = size // M
    for i in range(M):
        for j in range(N):
            print(x_casted[i * N + j], end=", ")
        print("")


# CHECK-LABEL: test_simd_f32_to_e4m3_ptx_path
# CHECK: -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0,
# CHECK: -256.0, -240.0, -240.0, -240.0, -240.0, -240.0, -240.0, -240.0,
# CHECK: -240.0, -240.0, -240.0, -240.0, -240.0, -240.0, -240.0, -240.0,
# CHECK: -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -224.0, -208.0, -208.0, -208.0, -208.0, -208.0, -208.0, -208.0,
# CHECK: -208.0, -208.0, -208.0, -208.0, -208.0, -208.0, -208.0, -208.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -176.0, -176.0, -176.0, -176.0, -176.0, -176.0, -176.0,
# CHECK: -176.0, -176.0, -176.0, -176.0, -176.0, -176.0, -176.0, -176.0,
# CHECK: -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -160.0, -144.0, -144.0, -144.0, -144.0, -144.0, -144.0, -144.0,
# CHECK: -144.0, -144.0, -144.0, -144.0, -144.0, -144.0, -144.0, -144.0,
# CHECK: -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0,
# CHECK: -128.0, -128.0, -128.0, -128.0, -128.0, -120.0, -120.0, -120.0,
# CHECK: -120.0, -120.0, -120.0, -120.0, -112.0, -112.0, -112.0, -112.0,
# CHECK: -112.0, -112.0, -112.0, -112.0, -112.0, -104.0, -104.0, -104.0,
# CHECK: -104.0, -104.0, -104.0, -104.0, -96.0, -96.0, -96.0, -96.0,
# CHECK: -96.0, -96.0, -96.0, -96.0, -96.0, -88.0, -88.0, -88.0,
# CHECK: -88.0, -88.0, -88.0, -88.0, -80.0, -80.0, -80.0, -80.0,
# CHECK: -80.0, -80.0, -80.0, -80.0, -80.0, -72.0, -72.0, -72.0,
# CHECK: -72.0, -72.0, -72.0, -72.0, -64.0, -64.0, -64.0, -64.0,
# CHECK: -64.0, -64.0, -64.0, -60.0, -60.0, -60.0, -56.0, -56.0,
# CHECK: -56.0, -56.0, -56.0, -52.0, -52.0, -52.0, -48.0, -48.0,
# CHECK: -48.0, -48.0, -48.0, -44.0, -44.0, -44.0, -40.0, -40.0,
# CHECK: -40.0, -40.0, -40.0, -36.0, -36.0, -36.0, -32.0, -32.0,
# CHECK: -32.0, -32.0, -30.0, -28.0, -28.0, -28.0, -26.0, -24.0,
# CHECK: -24.0, -24.0, -22.0, -20.0, -20.0, -20.0, -18.0, -16.0,
# CHECK: -16.0, -15.0, -14.0, -13.0, -12.0, -11.0, -10.0, -9.0,
# CHECK: -8.0, -7.0, -6.0, -5.0, -4.0, -3.0, -2.0, -1.0,
# CHECK: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,
# CHECK: 8.0, 9.0, 10.0, 11.0, 12.0, 13.0, 14.0, 15.0,
# CHECK: 16.0, 16.0, 18.0, 20.0, 20.0, 20.0, 22.0, 24.0,
# CHECK: 24.0, 24.0, 26.0, 28.0, 28.0, 28.0, 30.0, 32.0,
# CHECK: 32.0, 32.0, 32.0, 36.0, 36.0, 36.0, 40.0, 40.0,
# CHECK: 40.0, 40.0, 40.0, 44.0, 44.0, 44.0, 48.0, 48.0,
# CHECK: 48.0, 48.0, 48.0, 52.0, 52.0, 52.0, 56.0, 56.0,
# CHECK: 56.0, 56.0, 56.0, 60.0, 60.0, 60.0, 64.0, 64.0,
# CHECK: 64.0, 64.0, 64.0, 64.0, 64.0, 72.0, 72.0, 72.0,
# CHECK: 72.0, 72.0, 72.0, 72.0, 80.0, 80.0, 80.0, 80.0,
# CHECK: 80.0, 80.0, 80.0, 80.0, 80.0, 88.0, 88.0, 88.0,
# CHECK: 88.0, 88.0, 88.0, 88.0, 96.0, 96.0, 96.0, 96.0,
# CHECK: 96.0, 96.0, 96.0, 96.0, 96.0, 104.0, 104.0, 104.0,
# CHECK: 104.0, 104.0, 104.0, 104.0, 112.0, 112.0, 112.0, 112.0,
# CHECK: 112.0, 112.0, 112.0, 112.0, 112.0, 120.0, 120.0, 120.0,
# CHECK: 120.0, 120.0, 120.0, 120.0, 128.0, 128.0, 128.0, 128.0,
# CHECK: 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0,
# CHECK: 128.0, 144.0, 144.0, 144.0, 144.0, 144.0, 144.0, 144.0,
# CHECK: 144.0, 144.0, 144.0, 144.0, 144.0, 144.0, 144.0, 144.0,
# CHECK: 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 160.0, 176.0, 176.0, 176.0, 176.0, 176.0, 176.0, 176.0,
# CHECK: 176.0, 176.0, 176.0, 176.0, 176.0, 176.0, 176.0, 176.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 208.0, 208.0, 208.0, 208.0, 208.0, 208.0, 208.0,
# CHECK: 208.0, 208.0, 208.0, 208.0, 208.0, 208.0, 208.0, 208.0,
# CHECK: 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 224.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0,
# CHECK: 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0, 240.0,
# CHECK: 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0,
fn test_simd_f32_to_e4m3_ptx_path(ctx: DeviceContext) raises:
    print("== test_simd_f32_to_e4m3_ptx_path")

    alias M = 512
    var f32_simd = SIMD[DType.float32, M](0.0)
    for i in range(M):
        f32_simd[i] = i - 256

    alias test_simd_f32_to_e4m3_fn = test_simd_float32[M, DType.float8e4m3]

    var compiled_test_simd_f32_to_e4m3_fn = ctx.compile_function[
        test_simd_f32_to_e4m3_fn, _target = _get_gpu_target["sm_90"]()
    ]()
    ctx.enqueue_function(
        compiled_test_simd_f32_to_e4m3_fn, f32_simd, grid_dim=1, block_dim=1
    )
    ctx.synchronize()


# CHECK-LABEL: test_simd_f32_to_e5m2_ptx_path
# CHECK: -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0,
# CHECK: -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0, -256.0,
# CHECK: -256.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0, -224.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0, -192.0,
# CHECK: -192.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0, -160.0,
# CHECK: -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0,
# CHECK: -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0,
# CHECK: -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0, -128.0,
# CHECK: -128.0, -112.0, -112.0, -112.0, -112.0, -112.0, -112.0, -112.0,
# CHECK: -112.0, -112.0, -112.0, -112.0, -112.0, -112.0, -112.0, -112.0,
# CHECK: -96.0, -96.0, -96.0, -96.0, -96.0, -96.0, -96.0, -96.0,
# CHECK: -96.0, -96.0, -96.0, -96.0, -96.0, -96.0, -96.0, -96.0,
# CHECK: -96.0, -80.0, -80.0, -80.0, -80.0, -80.0, -80.0, -80.0,
# CHECK: -80.0, -80.0, -80.0, -80.0, -80.0, -80.0, -80.0, -80.0,
# CHECK: -64.0, -64.0, -64.0, -64.0, -64.0, -64.0, -64.0, -64.0,
# CHECK: -64.0, -64.0, -64.0, -64.0, -64.0, -56.0, -56.0, -56.0,
# CHECK: -56.0, -56.0, -56.0, -56.0, -48.0, -48.0, -48.0, -48.0,
# CHECK: -48.0, -48.0, -48.0, -48.0, -48.0, -40.0, -40.0, -40.0,
# CHECK: -40.0, -40.0, -40.0, -40.0, -32.0, -32.0, -32.0, -32.0,
# CHECK: -32.0, -32.0, -32.0, -28.0, -28.0, -28.0, -24.0, -24.0,
# CHECK: -24.0, -24.0, -24.0, -20.0, -20.0, -20.0, -16.0, -16.0,
# CHECK: -16.0, -16.0, -14.0, -12.0, -12.0, -12.0, -10.0, -8.0,
# CHECK: -8.0, -7.0, -6.0, -5.0, -4.0, -3.0, -2.0, -1.0,
# CHECK: 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0,
# CHECK: 8.0, 8.0, 10.0, 12.0, 12.0, 12.0, 14.0, 16.0,
# CHECK: 16.0, 16.0, 16.0, 20.0, 20.0, 20.0, 24.0, 24.0,
# CHECK: 24.0, 24.0, 24.0, 28.0, 28.0, 28.0, 32.0, 32.0,
# CHECK: 32.0, 32.0, 32.0, 32.0, 32.0, 40.0, 40.0, 40.0,
# CHECK: 40.0, 40.0, 40.0, 40.0, 48.0, 48.0, 48.0, 48.0,
# CHECK: 48.0, 48.0, 48.0, 48.0, 48.0, 56.0, 56.0, 56.0,
# CHECK: 56.0, 56.0, 56.0, 56.0, 64.0, 64.0, 64.0, 64.0,
# CHECK: 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0, 64.0,
# CHECK: 64.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0,
# CHECK: 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0, 80.0,
# CHECK: 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0,
# CHECK: 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0, 96.0,
# CHECK: 96.0, 112.0, 112.0, 112.0, 112.0, 112.0, 112.0, 112.0,
# CHECK: 112.0, 112.0, 112.0, 112.0, 112.0, 112.0, 112.0, 112.0,
# CHECK: 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0,
# CHECK: 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0,
# CHECK: 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0, 128.0,
# CHECK: 128.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0, 160.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0, 192.0,
# CHECK: 192.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0, 224.0,
# CHECK: 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0,
# CHECK: 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0, 256.0,
fn test_simd_f32_to_e5m2_ptx_path(ctx: DeviceContext) raises:
    print("== test_simd_f32_to_e5m2_ptx_path")

    alias M = 512
    var f32_simd = SIMD[DType.float32, M](0.0)
    for i in range(M):
        f32_simd[i] = i - 256

    alias test_simd_f32_to_e5m2_fn = test_simd_float32[M, DType.float8e5m2]

    var compiled_test_simd_f32_to_e5m2_fn = ctx.compile_function[
        test_simd_f32_to_e5m2_fn, _target = _get_gpu_target["sm_90"]()
    ]()
    ctx.enqueue_function(
        compiled_test_simd_f32_to_e5m2_fn, f32_simd, grid_dim=1, block_dim=1
    )
    ctx.synchronize()


fn main() raises:
    test_scaler_e4m3_to_f32()
    test_scaler_e5m2_to_f32()
    test_simd_e4m3_to_f32()
    test_simd_e5m2_to_f32()
    test_simd_e4m3_to_f16()
    test_simd_e5m2_to_f16()
    test_simd_e4m3_to_bf16()
    test_simd_e5m2_to_bf16()

    test_simd_f32_to_e4m3()
    test_simd_f32_to_e5m2()

    with DeviceContext() as ctx:
        test_simd_e4m3_to_f16_ptx_path(ctx)
        test_simd_e5m2_to_f16_ptx_path(ctx)
        test_simd_e4m3_to_f32_ptx_path(ctx)
        test_simd_e5m2_to_f32_ptx_path(ctx)

        test_simd_f32_to_e4m3_ptx_path(ctx)
        test_simd_f32_to_e5m2_ptx_path(ctx)
