# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
# RUN: %mojo -debug-level full -I %S/.. %s | FileCheck %s

from math import max, min

from nn.gather_scatter import scatter_nd_generator
from tensor import Tensor, TensorShape
from closed_source_memory.buffer import NDBuffer


fn test_case[
    type: DType,
](
    data: Tensor[type],
    indices: Tensor[DType.int64],
    updates: Tensor[type],
    output: Tensor[type],
) raises:
    @always_inline
    @parameter
    fn use_update[
        _type: DType, width: Int
    ](input_val: SIMD[_type, width], update_val: SIMD[_type, width]) -> SIMD[
        _type, width
    ]:
        return update_val

    test_case[type, use_update](data, indices, updates, output)


fn test_case[
    type: DType,
    reduce_fn: fn[type: DType, width: Int] (
        SIMD[type, width], SIMD[type, width]
    ) capturing -> SIMD[type, width],
](
    data: Tensor[type],
    indices: Tensor[DType.int64],
    updates: Tensor[type],
    output: Tensor[type],
) raises:
    var output_ref = output

    # Note: This is for the specific set of examples
    #      (due to _to_ndbuffer[] parameters).
    # last example 3,2,2,3 ; original: 3,2,3,3
    scatter_nd_generator[
        type, DType.int64, 3, 2, 3, False, reduce_fn=reduce_fn
    ](
        data._to_ndbuffer[3](),
        indices._to_ndbuffer[2](),
        updates._to_ndbuffer[3](),
        output._to_ndbuffer[3](),
    )

    for i in range(output.num_elements()):
        if output_ref._to_buffer()[i] != output._to_buffer()[i]:
            print_no_newline("FAIL: Mismatch at idx: ")
            print(i)


fn main() raises:
    fn test_scatternd() raises:
        print("== test_scatternd")
        var data = Tensor[DType.float32](
            TensorShape(4, 4, 4),
            List[Scalar[DType.float32]](
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
            ),
        )

        var indices = Tensor[DType.int64](TensorShape(2, 1), List[Int64](0, 2))

        var updates = Tensor[DType.float32](
            TensorShape(2, 4, 4),
            List[Float32](
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                8,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
            ),
        )

        var output_ref = Tensor[DType.float32](
            TensorShape(4, 4, 4),
            List[Float32](
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                8,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
            ),
        )

        test_case[DType.float32](
            data,
            indices,
            updates,
            output_ref,
        )

    # CHECK-LABEL: test_scatternd
    # CHECK-NOT: FAIL
    test_scatternd()

    fn test_scatternd_add() raises:
        print("== test_scatternd_add")
        var data = Tensor[DType.float32](
            TensorShape(4, 4, 4),
            List[Float32](
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
            ),
        )

        var indices = Tensor[DType.int64](TensorShape(2, 1), List[Int64](0, 0))

        var updates = Tensor[DType.float32](
            TensorShape(2, 4, 4),
            List[Float32](
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                8,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
            ),
        )

        var output_ref = Tensor[DType.float32](
            TensorShape(4, 4, 4),
            List[Float32](
                7,
                8,
                9,
                10,
                13,
                14,
                15,
                16,
                18,
                17,
                16,
                15,
                16,
                15,
                14,
                13,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
            ),
        )

        @always_inline
        @parameter
        fn _add[
            ty: DType, width: Int
        ](v1: SIMD[ty, width], v2: SIMD[ty, width]) -> SIMD[ty, width]:
            return v1 + v2

        test_case[DType.float32, _add](data, indices, updates, output_ref)

    # CHECK-LABEL: test_scatternd_add
    # CHECK-NOT: FAIL
    test_scatternd_add()

    fn test_scatternd_max() raises:
        print("== test_scatternd_max")
        var data = Tensor[DType.float32](
            TensorShape(4, 4, 4),
            List[Float32](
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
            ),
        )

        var indices = Tensor[DType.int64](TensorShape(2, 1), List[Int64](0, 0))

        var updates = Tensor[DType.float32](
            TensorShape(2, 4, 4),
            List[Float32](
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                8,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
            ),
        )

        var output_ref = Tensor[DType.float32](
            TensorShape(4, 4, 4),
            List[Float32](
                5,
                5,
                5,
                5,
                6,
                6,
                7,
                8,
                8,
                7,
                7,
                7,
                8,
                8,
                8,
                8,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
            ),
        )

        @always_inline
        @parameter
        fn _max[
            ty: DType, width: Int
        ](v1: SIMD[ty, width], v2: SIMD[ty, width]) -> SIMD[ty, width]:
            return max(v1, v2)

        test_case[DType.float32, _max](data, indices, updates, output_ref)

    # CHECK-LABEL: test_scatternd_max
    # CHECK-NOT: FAIL
    test_scatternd_max()

    fn test_scatternd_min() raises:
        print("== test_scatternd_min")
        var data = Tensor[DType.float32](
            TensorShape(4, 4, 4),
            List[Float32](
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
            ),
        )

        var indices = Tensor[DType.int64](TensorShape(2, 1), List[Int64](0, 0))

        var updates = Tensor[DType.float32](
            TensorShape(2, 4, 4),
            List[Float32](
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                8,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
            ),
        )

        var output_ref = Tensor[DType.float32](
            TensorShape(4, 4, 4),
            List[Float32](
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
            ),
        )

        @always_inline
        @parameter
        fn _min[
            ty: DType, width: Int
        ](v1: SIMD[ty, width], v2: SIMD[ty, width]) -> SIMD[ty, width]:
            return min(v1, v2)

        test_case[DType.float32, _min](data, indices, updates, output_ref)

    # CHECK-LABEL: test_scatternd_min
    # CHECK-NOT: FAIL
    test_scatternd_min()

    fn test_scatternd_multiply() raises:
        print("== test_scatternd_multiply")
        var data = Tensor[DType.float32](
            TensorShape(4, 4, 4),
            List[Float32](
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
            ),
        )

        var indices = Tensor[DType.int64](TensorShape(2, 1), List[Int64](0, 0))

        var updates = Tensor[DType.float32](
            TensorShape(2, 4, 4),
            List[Float32](
                5,
                5,
                5,
                5,
                6,
                6,
                6,
                6,
                7,
                7,
                7,
                7,
                8,
                8,
                8,
                8,
                1,
                1,
                1,
                1,
                2,
                2,
                2,
                2,
                3,
                3,
                3,
                3,
                4,
                4,
                4,
                4,
            ),
        )

        var output_ref = Tensor[DType.float32](
            TensorShape(4, 4, 4),
            List[Float32](
                5,
                10,
                15,
                20,
                60,
                72,
                84,
                96,
                168,
                147,
                126,
                105,
                128,
                96,
                64,
                32,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
                8,
                7,
                6,
                5,
                4,
                3,
                2,
                1,
                1,
                2,
                3,
                4,
                5,
                6,
                7,
                8,
            ),
        )

        @always_inline
        @parameter
        fn _mul[
            ty: DType, width: Int
        ](v1: SIMD[ty, width], v2: SIMD[ty, width]) -> SIMD[ty, width]:
            return v1 * v2

        test_case[DType.float32, _mul](data, indices, updates, output_ref)

    # CHECK-LABEL: test_scatternd_multiply
    # CHECK-NOT: FAIL
    test_scatternd_multiply()
