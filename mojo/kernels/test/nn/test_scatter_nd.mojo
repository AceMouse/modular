# ===----------------------------------------------------------------------=== #
#
# This file is Modular Inc proprietary.
#
# ===----------------------------------------------------------------------=== #
# RUN: %mojo -debug-level full -I %S/.. %s | FileCheck %s

from math import max, min

from nn.gather_scatter import scatter_nd_generator
from tensor import Tensor, TensorShape
from closed_source_test_utils import linear_fill


fn test_case[
    type: DType,
](
    input_shape: TensorShape,
    indices_shape: TensorShape,
    updates_shape: TensorShape,
    data_vals: VariadicList[Scalar[type]],
    indices_vals: VariadicList[Int64],
    updates_vals: VariadicList[Scalar[type]],
    output_ref_vals: VariadicList[Scalar[type]],
) raises:
    @always_inline
    @parameter
    fn use_update[
        _type: DType, width: Int
    ](input_val: SIMD[_type, width], update_val: SIMD[_type, width]) -> SIMD[
        _type, width
    ]:
        return update_val

    test_case[type, use_update](
        input_shape,
        indices_shape,
        updates_shape,
        data_vals,
        indices_vals,
        updates_vals,
        output_ref_vals,
    )


fn test_case[
    type: DType,
    reduce_fn: fn[type: DType, width: Int] (
        SIMD[type, width], SIMD[type, width]
    ) capturing -> SIMD[type, width],
](
    input_shape: TensorShape,
    indices_shape: TensorShape,
    updates_shape: TensorShape,
    data_vals: VariadicList[Scalar[type]],
    indices_vals: VariadicList[Int64],
    updates_vals: VariadicList[Scalar[type]],
    output_ref_vals: VariadicList[Scalar[type]],
) raises:
    var data = Tensor[type](input_shape)
    linear_fill(data, data_vals)
    var indices = Tensor[DType.int64](indices_shape)
    linear_fill(indices, indices_vals)
    var updates = Tensor[type](updates_shape)
    linear_fill(updates, updates_vals)
    var output = Tensor[type](input_shape)

    # Note: This is for the specific set of examples
    #      (due to _to_ndbuffer[] parameters).
    # last example 3,2,2,3 ; original: 3,2,3,3
    scatter_nd_generator[
        type, DType.int64, 3, 2, 3, False, reduce_fn=reduce_fn
    ](
        data._to_ndbuffer[3](),
        indices._to_ndbuffer[2](),
        updates._to_ndbuffer[3](),
        output._to_ndbuffer[3](),
    )

    _ = data
    _ = indices
    _ = updates

    var output_ref = Tensor[type](input_shape)
    linear_fill(output_ref, output_ref_vals)

    for i in range(output.num_elements()):
        if output_ref._to_buffer()[i] != output._to_buffer()[i]:
            print_no_newline("FAIL: Mismatch at idx: ")
            print(i)


fn main() raises:
    fn test_scatternd() raises:
        print("== test_scatternd")
        var data = VariadicList[Float32](
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
        )

        var indices = VariadicList[Int64](0, 2)

        var updates = VariadicList[Float32](
            5,
            5,
            5,
            5,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            8,
            8,
            8,
            8,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
        )

        var output_ref = VariadicList[Float32](
            5,
            5,
            5,
            5,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            8,
            8,
            8,
            8,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
        )

        test_case[DType.float32](
            TensorShape(4, 4, 4),
            TensorShape(2, 1),
            TensorShape(2, 4, 4),
            data,
            indices,
            updates,
            output_ref,
        )

    # CHECK-LABEL: test_scatternd
    # CHECK-NOT: FAIL
    test_scatternd()

    fn test_scatternd_add() raises:
        print("== test_scatternd_add")
        var data = VariadicList[Float32](
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
        )

        var indices = VariadicList[Int64](0, 0)

        var updates = VariadicList[Float32](
            5,
            5,
            5,
            5,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            8,
            8,
            8,
            8,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
        )

        var output_ref = VariadicList[Float32](
            7,
            8,
            9,
            10,
            13,
            14,
            15,
            16,
            18,
            17,
            16,
            15,
            16,
            15,
            14,
            13,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
        )

        @always_inline
        @parameter
        fn _add[
            ty: DType, width: Int
        ](v1: SIMD[ty, width], v2: SIMD[ty, width]) -> SIMD[ty, width]:
            return v1 + v2

        test_case[DType.float32, _add](
            TensorShape(4, 4, 4),
            TensorShape(2, 1),
            TensorShape(2, 4, 4),
            data,
            indices,
            updates,
            output_ref,
        )

    # CHECK-LABEL: test_scatternd_add
    # CHECK-NOT: FAIL
    test_scatternd_add()

    fn test_scatternd_max() raises:
        print("== test_scatternd_max")
        var data = VariadicList[Float32](
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
        )

        var indices = VariadicList[Int64](0, 0)

        var updates = VariadicList[Float32](
            5,
            5,
            5,
            5,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            8,
            8,
            8,
            8,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
        )

        var output_ref = VariadicList[Float32](
            5,
            5,
            5,
            5,
            6,
            6,
            7,
            8,
            8,
            7,
            7,
            7,
            8,
            8,
            8,
            8,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
        )

        @always_inline
        @parameter
        fn _max[
            ty: DType, width: Int
        ](v1: SIMD[ty, width], v2: SIMD[ty, width]) -> SIMD[ty, width]:
            return max(v1, v2)

        test_case[DType.float32, _max](
            TensorShape(4, 4, 4),
            TensorShape(2, 1),
            TensorShape(2, 4, 4),
            data,
            indices,
            updates,
            output_ref,
        )

    # CHECK-LABEL: test_scatternd_max
    # CHECK-NOT: FAIL
    test_scatternd_max()

    fn test_scatternd_min() raises:
        print("== test_scatternd_min")
        var data = VariadicList[Float32](
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
        )

        var indices = VariadicList[Int64](0, 0)

        var updates = VariadicList[Float32](
            5,
            5,
            5,
            5,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            8,
            8,
            8,
            8,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
        )

        var output_ref = VariadicList[Float32](
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
        )

        @always_inline
        @parameter
        fn _min[
            ty: DType, width: Int
        ](v1: SIMD[ty, width], v2: SIMD[ty, width]) -> SIMD[ty, width]:
            return min(v1, v2)

        test_case[DType.float32, _min](
            TensorShape(4, 4, 4),
            TensorShape(2, 1),
            TensorShape(2, 4, 4),
            data,
            indices,
            updates,
            output_ref,
        )

    # CHECK-LABEL: test_scatternd_min
    # CHECK-NOT: FAIL
    test_scatternd_min()

    fn test_scatternd_multiply() raises:
        print("== test_scatternd_multiply")
        var data = VariadicList[Float32](
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
        )

        var indices = VariadicList[Int64](0, 0)

        var updates = VariadicList[Float32](
            5,
            5,
            5,
            5,
            6,
            6,
            6,
            6,
            7,
            7,
            7,
            7,
            8,
            8,
            8,
            8,
            1,
            1,
            1,
            1,
            2,
            2,
            2,
            2,
            3,
            3,
            3,
            3,
            4,
            4,
            4,
            4,
        )

        var output_ref = VariadicList[Float32](
            5,
            10,
            15,
            20,
            60,
            72,
            84,
            96,
            168,
            147,
            126,
            105,
            128,
            96,
            64,
            32,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
            8,
            7,
            6,
            5,
            4,
            3,
            2,
            1,
            1,
            2,
            3,
            4,
            5,
            6,
            7,
            8,
        )

        @always_inline
        @parameter
        fn _mul[
            ty: DType, width: Int
        ](v1: SIMD[ty, width], v2: SIMD[ty, width]) -> SIMD[ty, width]:
            return v1 * v2

        test_case[DType.float32, _mul](
            TensorShape(4, 4, 4),
            TensorShape(2, 1),
            TensorShape(2, 4, 4),
            data,
            indices,
            updates,
            output_ref,
        )

    # CHECK-LABEL: test_scatternd_multiply
    # CHECK-NOT: FAIL
    test_scatternd_multiply()
